#+TITLE:     Literate blogging with Org mode and Octopress
#+AUTHOR:    aki
#+EMAIL:     aki@utahraptor
#+DATE:      2013-04-06 Sat

My blog used to be hosted on Posterous, but as of this post it's
generated by a little bit of Emacs Lisp that turns Org mode files into
Markdown which is then processed by Octopress and Jekyll to produce
the site you see here. This has all of the usual benefits of static
site generators but (I hope) will allow me to experiment with literate
programming in the context of blogging, while retaining the polish
that the Octopress front-end provides.

** An Octopress-flavored Markdown backend

There are already a [[http://orgmode.org/worg/org-tutorials/org-jekyll.html][few]] [[http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/][other]] [[http://juanreyero.com/open/org-jekyll/][ways]] to publish Org files as Jekyll (or
Octopress) blog posts, however desipite my short list of requirements,
I found them a bit lacking. One or two of them use the existing
(X)HTML backend for Org, and others didn't support crucial features
like code blocks. So, in proper NIH-style, I wrote some Emacs Lisp to
export Org files to something Octopress could work with, and learned a
bit about some new features of Org's internals along the way.

Org has a new exporting system that's not released with the latest
stable build yet, but is [[http://orgmode.org/worg/dev/org-export-reference.html][well documented]] and is more flexible than the
[[http://orgmode.org/worg/org-contrib/org-export-generic.html][existing generic export library]]. Writing a simple backend that covered
a small subset of Org's features turned out to be pretty easy to do.

The new export functionality is defined in `ox.el`, and there are some
example backends including one that exports to "ASCII" text which was
extremely helpful.

Org will first parse your file into a syntax tree, and then call
functions you define in your backend, in a bottom-up fashion, starting
with the leaves of the tree. This is probably best demonstrated with
an example.

#+BEGIN_SRC org
  * Headline 1
  
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua.
#+END_SRC

Org will parse this file into something like the following syntax tree:

#+BEGIN_SRC emacs-lisp :exports none :session octopress
  (defun simplify (x)
    (if (not (null x))
        (case (type-of x)
          (string (substring-no-properties x))
          (cons
           (cons (org-element-type x)
                 (mapcar 'simplify (org-element-contents x))))
          (t (error "unknown type")))
      x))
  
  (defun simplify-org-str (s)
    (simplify
     (with-temp-buffer
       (org-mode)
       (insert s)
       (org-element-parse-buffer))))
#+END_SRC

#+RESULTS:
: simplify-org-str

#+BEGIN_SRC emacs-lisp :exports results :results output :session octopress
  (pp (simplify-org-str "* Headline 1
  
  Lorem ipsum"))
#+END_SRC

# #+BEGIN_SRC
# (org-data
#  (headline
#   (section
#    (paragraph "  Lorem ipsum"))))
# #+END_SRC

Defining a new backend is done with the
`org-export-define-backend` function, which accepts two arguments, a
symbol and an alist. The "keys" of the alist should be the type of Org
syntax element, and the "values" should be a function that can export
that type of element to your chosen format.

#+NAME: org-export-define-backend
#+BEGIN_SRC common-lisp
(org-export-define-backend 'octopress
  '((bold . org-octopress-bold)
    (headline . org-octopress-headline)
    (italic . org-octopress-italic)
    (link . org-octopress-link)
    (paragraph . org-octopress-paragraph)
    (section . org-octopress-section)
    (src-block . org-octopress-src-block)
    (template . org-octopress-template)))
#+END_SRC
